#!/bin/sh
# Contributors: 
# redhat27 - 2017 (Github user shounak-de)
# ArchPhoenix Team 2020-2021

URLList=/etc/IpBan/FirewallHostsExternal.deny		# Change to an appropriate location if needed This file is mandatory. It has the list of URLs of files that has the blocking IP and CIDR soures
AllowList=/etc/IpBan/FirewallHosts.allow			# Change to an appropriate location if needed. This file is mandatory, append to this file your own AllowListed discrete IPs.
DenyList=/etc/IpBan/FirewallHosts.deny			# Change to an appropriate location if needed This file is optional. You may put your manual IPs and CIDR ranges to block.
ExternalAllowList=/etc/IpBan/FirewallHostsExternal.allow	# Set to an empty file to disable, change to an appropriate location if needed. This file is optional.
FileSourceBase=https://raw.githubusercontent.com/ArchPhoenixTeam/IP-Block-List/main/
FileDenyLists=Deny.lists 					# This variable is not an array, your array must be inside one file.
FileSourceBaseAllowList=$FileSourceBase				# Set this variable to another base URL if required
FileExternalAllowList=DefaultAllow.list				# This variable is an array of IP regex to allow list by default, obtained from a remote source

case $(ipset -v | grep -o "v[4,6]") in
  v6) MATCH_SET='--match-set'; CREATE='n'; DESTROY='destroy'; RESTORE='restore'; ADD='add'; SWAP='swap'; IPHASH='hash:ip'; NETHASH='hash:net'; ESL=7
      lsmod | grep -q "xt_set" || for module in ip_set ip_set_hash_net ip_set_hash_ip xt_set; do modprobe $module; done;;
  v4) MATCH_SET='--set'; CREATE='-N'; DESTROY='--destroy'; RESTORE='--restore'; ADD='-A'; SWAP='--swap'; IPHASH='iphash'; NETHASH='nethash'; ESL=6
      lsmod | grep -q "ipt_set" || for module in ip_set ip_set_nethash ip_set_iphash ipt_set; do modprobe $module; done;;
  *) logger -t Firewall "$0: Unknown ipset version. Exiting." && exit 1;;
esac
startTS=$(date +%s); logger -t Firewall "$0: Adding ip blocking rules to firewall..." && [ -t 1 ] && echo "$0: Adding ip blocking rules to firewall..."
[ ! -d $(dirname $URLList) ] && mkdir -p $(dirname $URLList)
[ ! -s $URLList ] && echo "Updating $URLList"
[ ! -s $URLList ] && curl -sk "${FileSourceBase}${FileDenyLists}" -o $URLList
[ -s $ExternalAllowList ] && echo "Updating external allow list"
[ -s $ExternalAllowList ] && curl -sk "${FileSourceBaseAllowList}${FileExternalAllowList}" -o $ExternalAllowList
lastTS=$(date +%s); [ -t 1 ] && echo -n ">>> Downloading and aggregating blocked sources (also processing AllowLists)..."; ((while read -r url; do nice -n 15 curl -sk $url; done <$URLList); [ -s $DenyList ] && cat $DenyList) | nice -n 15 sed -n "s/\r//;/^$/d;/^[0-9,\.,\/]*$/p" | nice -n 15 grep -vf $AllowList | nice -n 15 grep -vf $ExternalAllowList | nice -n 15 awk '!a[$0]++' >/tmp/DenyListResolutionFile; TotalCount=$(wc -l </tmp/DenyListResolutionFile); CIDRCount=$(grep "/" /tmp/DenyListResolutionFile | wc -l); DiscreteIPCount=$(($TotalCount-$CIDRCount)); Sets=$((($DiscreteIPCount/65535)+1)); this=5; FinalMessage="$0: Loaded sets"; [ -t 1 ] && echo -n "[$TotalCount/$DiscreteIPCount/$CIDRCount]"
while [ $this -gt $Sets ]; do $(ipset -q $SWAP IPBanRules${this}IP IPBanRules${this}IP) && iptables -t raw -D PREROUTING -m set $MATCH_SET IPBanRules${this}IP src -j DROP && ipset $DESTROY IPBanRules${this}IP; this=$((this-1)); done; this=1
while [ $this -le $Sets ]; do [ -t 1 ] && (elapsed=$(($(date +%s)-$lastTS)); echo -en " ~${elapsed}s\n>>> Adding data and processing rule for IPBanRules${this}IP..."); lastTS=$(date +%s); ipset -q $CREATE IPBanRules${this}IP $IPHASH; ipset -q $DESTROY tYAMB; (echo "$CREATE tYAMB $IPHASH"; sed -n "/\//!p" /tmp/DenyListResolutionFile | sed -n "$(((($this-1)*65535)+1)),$(($this*65535)) s/^/$ADD tYAMB /p"; echo "COMMIT") | nice -n 15 ipset $RESTORE && ipset $SWAP tYAMB IPBanRules${this}IP; iptables-save | grep -q IPBanRules${this}IP || iptables -t raw -I PREROUTING -m set $MATCH_SET IPBanRules${this}IP src -j DROP; FinalMessage="$FinalMessage IPBanRules${this}IP ($(expr $(ipset -L IPBanRules${this}IP | wc -l) - $ESL))"; this=$((this+1)); done
[ -t 1 ] && (elapsed=$(($(date +%s)-$lastTS)); echo -en " ~${elapsed}s\n>>> Adding data and processing rule for IPBanRulesCIDR..."); lastTS=$(date +%s); ipset -q $CREATE IPBanRulesCIDR $NETHASH; ipset -q $DESTROY tYAMB; (echo "$CREATE tYAMB $NETHASH"; sed -n "/\//s/^/$ADD tYAMB /p" /tmp/DenyListResolutionFile; echo "COMMIT") | nice -n 15 ipset $RESTORE && ipset $SWAP tYAMB IPBanRulesCIDR; iptables-save | grep -q IPBanRulesCIDR || iptables -t raw -I PREROUTING -m set $MATCH_SET IPBanRulesCIDR src -j DROP; FinalMessage="$FinalMessage and IPBanRulesCIDR ($(expr $(ipset -L IPBanRulesCIDR | wc -l) - $ESL)) in $(($(date +%s)-$startTS)) seconds"
[ -t 1 ] && (elapsed=$(($(date +%s)-$lastTS)); echo -en " ~${elapsed}s\n>>> Cleaning up..."); ipset $DESTROY tYAMB; rm /tmp/DenyListResolutionFile; lastTS=$(date +%s)
logger -t Firewall $FinalMessage && [ -t 1 ] && (elapsed=$(($(date +%s)-$lastTS)); echo -e " ~${elapsed}s\n$FinalMessage")
